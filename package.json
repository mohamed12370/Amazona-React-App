{
    "name": "amazona",
    "version": "1.0.0",
    "description": "1. Create-React-App\r 2. Create Git Repository\r 3. Create react router dom\r 4. Create router for home screen\r 5. Create Router for prodect screen\r 6. add start commend as node backend/server.js\r 7. require express\r 8. create route for / return backend is ready\r 9. move prodects.js from frontend to backend\r 10. create router for /api/prodects\r 11. return prodects\r 12. run npm start\r 13. fecth prodect from backend\r     13-1. set proxy in package.json\r     13-2. npm install axios\r     13-3. use state hook\r     13-4. use effect hook\r     13-5. use redux hook\r 14. Mange state by reducer\r     14-1. define reduser\r     14-2. update fecth data\r     14-3. get sate from reducer\r 15. Add botstrap\r     15-1. npm i react-bootstrap bootstrap\r     15-2. update App.js\r 16. Create prodect and Rating componet\r     16-1. crate reting component\r     16-2. create prodect component\r     16-3. use rating comonent in prodect component\r 17. Create Prodect Details\r     17-1. fetch prodect from backend\r     17-2. create 3 columns for image , info and action\r 18. Create Loading and Message Copmonent\r     18-1. craete loading component\r     18-2. use spinner component\r     18-3. craete message component\r     18-4. create utils.js to define getError function\r 19. Implement Add to card\r     19-1. create react conText\r     19-2. define reducer\r     19-3. create store provider\r     19-4. implement add to card button click handler\r 20. complete add to cart\r     20-1. check exist item in the cart\r     20-2. check count stock in backend\r 21. Create Cart Screen\r     21-1. create 2 columns\r     21-2. dispaly items list\r     21-3. create action colum\r 22. Complete Cart Screen\r     22-1. Click handler to inc/dec item\r     22-2. Click handler to Remove item\r     22-3. Click handler to Checkout\r 23. create Signin Screen\r     23-1. create signin form\r     23-2. add email and password\r     23-3. add signin button\r 24. Connect to MongoDB database\r     24-1. create atlas mongoDB database\r     24-2. install local mongoDB database\r     24-3. npm i mongoose\r     24-4. connect to mongoDB database\r 25. Seed Sample Data\r     25-1. create prodect model\r     25-2. create user model\r     25-3. create seed route\r     25-4. use route in Server.js\r     25-5. seed sample prodect\r 26. seed sample users\r     26-1. create user model\r     26-2. seed sample users\r     26-3. create users routes\r 27. create signin backend api\r     27-1 create signin api\r     27-2. npm i jsonwebtoken\r     27-3. define generateToken\r 28. complete signin screen\r     28-1. handle submit action\r     28-2. save token in store and local stroge\r     28-3. show user name in header\r 29. create shipping screen\r     29-1. create form inputs\r     29-2. handle save shipping address\r     29-3. add checkout wizard bar\r 30. create sign up screen\r     30-1. create inputs forms\r     30-2. handle submit\r     30-3. create backend api\r 31. Implement Select Payment Method Screen\r     31-1. create input forms\r     31-2. handle submit\r 32. Create Place Order Screen\r     32-1. show cart items, payment and address\r     32-2. handle place order action\r     32-3 create order , create api\r 33. impelement place order action\r     33-1. handle place order action\r     33-2. create order , create api\r 34. create order screen\r     34-1. create backend api for order/:id\r     34-2. fetch order api in frontend\r     34-3. show order infomation in 2 columns\r 35. pay order py paypal\r     35-1. generate paypal clinet id\r     35-2. create api to return client id\r     35-3. install react-paypal-js\r     35-4. use paypalScriptProvider in index.js\r     35-5. use usePayPalScriptProvider in order screen\r     35-6. implement loadPayPalScript function\r     36-7. render paypal button\r     36-8. implement onApprove payment function\r     36-9. create pay order api in backend\r 36. Display Order History\r     36-1. create order screen\r     36-2. create order history api\r     36-3. use api in frontend\r 37. create profail screen\r     37-1. get user info from context\r     37-2. show user info\r     37-3. create user update api\r     37-4. update user info\r 38. publish to heroku\r     38-1. create and config node project\r     38-2. serve build folder forntend folder\r     38-3. create heroku account\r     38-4. connect it to github\r     38-5. create mongodb atlas database\r     38-6. set database connection in herkou env variables\r     38-7. commit and push",
    "main": "index.js",
    "scripts": {
        "build": "cd backend && npm install && cd ../frontend && npm install && npm run build",
        "start": "node backend/Server.js ",
        "test": "echo \"Error: no test specified\" && exit 1"
    },
    "repository": {
        "type": "git",
        "url": "git+https://github.com/mohamed12370/Amazona-React-App.git"
    },
    "keywords": [],
    "author": "",
    "license": "ISC",
    "bugs": {
        "url": "https://github.com/mohamed12370/Amazona-React-App/issues"
    },
    "homepage": "https://github.com/mohamed12370/Amazona-React-App#readme"
}